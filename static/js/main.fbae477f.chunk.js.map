{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","temp","time","useState","query","setQuery","weather","setWeather","currTime","d","hrs","getHours","s","timezone","Math","floor","className","main","round","Date","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","day","getDay","date","getDate","month","getMonth","year","getFullYear","h","m","minute","getMinutes","hours","dateBuilder","getBackgroundicon","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbae477f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nconst api ={\r\n  key: \"7a747bf83ad8f3a20ecd55111a6dc295\",\r\n  base: \"https://api.openweathermap.org/data/2.5/\"\r\n}\r\nfunction App() {\r\n  const [query, setQuery] = useState('');\r\n  const [weather, setWeather] = useState({});\r\n\r\n  const search = evt => {\r\n    if (evt.key === \"Enter\"){\r\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n        .then(res => res.json())\r\n        .then(result => {\r\n          setWeather(result);\r\n          setQuery('');\r\n          console.log(result); \r\n        });\r\n    }\r\n  }\r\n  \r\n\r\n  const dateBuilder=(d) => {\r\n    let months = [\"Jnauary\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n\r\n    let s = weather.timezone;\r\n    let h = Math.floor((s/3600));\r\n    let m = Math.floor((s -(3600*h))/60);\r\n\r\n    let minute = d.getMinutes()-30+m;\r\n    let hours = d.getHours() - 5 + h;\r\n\r\n\r\n    if (minute < 0){\r\n      hours--;\r\n      minute = 60 + minute;\r\n    }\r\n    if (hours<0){\r\n      hours = 24 + hours;\r\n    }\r\n\r\n    let time =hours + ':' + minute;\r\n\r\n    return `${time} ${day} ${date} ${month} ${year} `\r\n\r\n  }\r\n  const currTime=(d) => {\r\n    let hrs = d.getHours();\r\n    let s = weather.timezone;\r\n    let h = Math.floor(s/3600);\r\n    hrs = hrs - 5 + h;\r\n    if (hrs<0){\r\n      hrs = 24 + hrs;\r\n    }\r\n    return `${hrs}`\r\n  }\r\n  const getBackgroundicon = (weather) => {\r\n    if (weather === 'Clouds') {\r\n        return \"clouds\";\r\n    }\r\n    else if (weather === 'Clear') {\r\n        if(currTime(new Date())>=6 && currTime(new Date())<=18)\r\n        return \"clear\";\r\n        else\r\n        return \"moon\";\r\n    }\r\n    else if (weather === 'Mist') {\r\n      return \"mist\";\r\n    }\r\n    else if (weather === 'Rain') {\r\n      return \"rain\";\r\n    }\r\n    return \"clouds\";\r\n    \r\n}\r\nconst getBackground = (temp,time) => {\r\n  if(temp<=20)\r\n  {\r\n    if(time>=6 && time<18)\r\n     return 'app';\r\n    else\r\n     return 'app coldnight';\r\n  }\r\n  else{\r\n    if(time>=6 && time<18)\r\n     return 'app warmday';\r\n    else\r\n     return 'app warmnight';\r\n  }\r\n}\r\n  return (\r\n    <div className={\r\n      (typeof weather.main != \"undefined\")?(     \r\n      getBackground(Math.round(weather.main.temp),currTime(new Date())))\r\n      :('app')\r\n    }>\r\n      <main>\r\n        <div className=\"search-box\">\r\n          <input \r\n          type =\"text\" \r\n          className=\"search-bar\"\r\n          placeholder=\"Search here\"\r\n          onChange={e => setQuery(e.target.value)}\r\n          value={query}\r\n          onKeyPress={search}\r\n          />\r\n        </div>\r\n        {(typeof weather.main != \"undefined\")? (\r\n        <div>\r\n           <div className=\"location-box\">\r\n          <div className=\"location\">{weather.name},{weather.sys.country }</div>\r\n          <div className=\"date\">{dateBuilder(new Date())}</div>\r\n        </div>\r\n        <div className=\"weather-box\">\r\n          <div className=\"temp\">\r\n            {Math.round(weather.main.temp)}Â°c\r\n          </div>\r\n          <div className=\"weather\">{weather.weather[0].main}</div>\r\n          <div className={\r\n          getBackgroundicon(weather.weather[0].main)}>\r\n            \r\n          </div>\r\n\r\n        </div>\r\n        \r\n        </div>\r\n        \r\n        ) :(<div id= \"notfound\">City Not Found</div>)}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}